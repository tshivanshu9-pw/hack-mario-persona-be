version: '3'
# Api  DEV: Live Reload 
services:

  mongo_db: 
    image: mongo:latest
    container_name: mongodb_container
    volumes:
      - ./database:/data/db
    ports:
      - 27017:${MONGO_PORT}
    networks:
      - nestjs_dev_network

  node:
    container_name: nestjs_dev
    image: nestjs_api_dev:1.0.0
    build:
      context: .
      dockerfile: ./Dockerfile
    command: npm run start:debug
    env_file:
      - .env
    environment:
      - DATABASE_URI=mongodb://mongodb_container:${MONGO_PORT}/user_service
    ports: 
      - ${PORT}:${PORT}
      - 9229:9229
    networks:
      - nestjs_dev_network
    volumes:
      - ./:/usr/src/app
      - /usr/src/app/node_modules/
    restart: unless-stopped
    depends_on:
      - mongo_db


  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      - nestjs_dev_network
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
  
  kafka:
    image: confluentinc/cp-kafka:latest
    networks:
      - nestjs_dev_network
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
  
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    networks:
      - nestjs_dev_network
    depends_on:
      - kafka
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: ${KAFKA_BROKERCONNECT}
networks:
  nestjs_dev_network:
    driver: bridge
